// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(PATIENT)
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Patient specific
  appointments     Appointment[]
  medicalRecords   MedicalRecord[]
  patientProfile   PatientProfile?
  
  // Doctor specific
  doctorAppointments Appointment[] @relation("DoctorAppointments")
  
  @@map("users")
}

model Appointment {
  id          String           @id @default(cuid())
  patientId   String
  doctorId    String?
  date        DateTime
  time        String
  reason      String
  status      AppointmentStatus @default(PENDING)
  notes       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  patient     User             @relation(fields: [patientId], references: [id])
  doctor      User?            @relation("DoctorAppointments", fields: [doctorId], references: [id])
  
  @@map("appointments")
}

model MedicalRecord {
  id          String   @id @default(cuid())
  patientId   String
  title       String
  description String?
  fileUrl     String?
  fileName    String?
  fileType    String?
  fileSize    Int?
  category    String?
  status      String   @default("PROCESSING")
  uploadedAt  DateTime @default(now())
  
  patient     User     @relation(fields: [patientId], references: [id])
  
  @@map("medical_records")
}

model PatientProfile {
  id               String   @id @default(cuid())
  patientId        String   @unique
  dateOfBirth      DateTime?
  gender           String?
  address          String?
  emergencyContact String?
  emergencyPhone   String?
  bloodType        String?
  allergies        String?
  medications      String?
  medicalHistory   String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  patient          User     @relation(fields: [patientId], references: [id])
  
  @@map("patient_profiles")
}

enum Role {
  PATIENT
  DOCTOR
  ADMIN
}

enum AppointmentStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}